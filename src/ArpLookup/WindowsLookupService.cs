using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;
using System.Threading.Tasks;

namespace ArpLookup
{
    /// <summary>
    /// Provides the necessary implementations for ARP lookups on Windows platforms.
    /// </summary>
    internal static class WindowsLookupService
    {
        /// <summary>
        /// Gets a value indicating whether this class can be used on the current platform.
        /// </summary>
        public static bool IsSupported => PlatformHelpers.IsWindows();

        /// <summary>
        /// Call IpHlpApi.SendARP to lookup the mac address on windows-based systems.
        /// </summary>
        /// <param name="ip">The <see cref="IPAddress"/> to pass to the Win32 API.</param>
        /// <exception cref="Win32Exception">If IpHlpApi.SendARP returns non-zero.</exception>
        /// <returns>A <see cref="PhysicalAddress"/> instance that represents the address found by IpHlpApi.SendARP.</returns>
        public static PhysicalAddress? Lookup(IPAddress ip)
        {
            _ = ip ?? throw new ArgumentNullException(nameof(ip));
            if (!IsSupported)
            {
                throw new PlatformNotSupportedException();
            }

            // based on https://stackoverflow.com/a/37231/1200847
            var destIp = BitConverter.ToUInt32(ip.GetAddressBytes(), 0);

            var addr = new byte[6];
            var len = addr.Length;

            var res = NativeMethods.SendARP(destIp, 0, addr, ref len);

            if (res == 0)
            {
                return new PhysicalAddress(addr);
            }
            else if (res == NativeMethods.ERROR_BAD_NET_NAME)
            {
                return null;
            }

            throw new Win32Exception(res);
        }

        private static class NativeMethods
        {
            public const int ERROR_BAD_NET_NAME = 67;

            // based on code generated by https://github.com/microsoft/CsWin32, modified

            /// <summary>The SendARP function sends an Address Resolution Protocol (ARP) request to obtain the physical address that corresponds to the specified destination IPv4 address.</summary>
            /// <param name="destinationIp">The destination IPv4 address, in the form of an <a href="https://docs.microsoft.com/windows/desktop/api/inaddr/ns-inaddr-in_addr">IPAddr</a> structure. The ARP request attempts to obtain the physical address that corresponds to this IPv4 address.</param>
            /// <param name="sourceIp">The source IPv4 address of the sender, in the form of an <a href="https://docs.microsoft.com/windows/desktop/api/inaddr/ns-inaddr-in_addr">IPAddr</a> structure. This parameter is optional and is used to select the interface to send the request on for the ARP entry. The caller may specify zero corresponding to the <b>INADDR_ANY</b> IPv4 address for this parameter.</param>
            /// <param name="macAddress">A pointer to an array of <b>ULONG</b> variables. This array must have at least two <b>ULONG</b> elements to hold an  Ethernet or token ring physical address. The first six bytes of this array receive the physical address that corresponds to the IPv4 address specified by the <i>DestIP</i> parameter.</param>
            /// <param name="physicalAddrLength">
            /// <para>On input, a pointer to a <b>ULONG</b> value that specifies the maximum buffer size, in bytes, the application has set aside to receive the physical address or MAC address. The buffer size should be at least 6 bytes for an Ethernet or token ring physical address The buffer to receive the physical address is pointed to by the <i>pMacAddr</i> parameter. On successful output, this parameter points to a value that specifies the number of bytes written to the buffer pointed to by the <i>pMacAddr</i>.</para>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api/iphlpapi/nf-iphlpapi-sendarp#parameters">Read more on docs.microsoft.com</see>.</para>
            /// </param>
            /// <returns>
            /// <para>If the function succeeds, the return value is NO_ERROR. If the function fails, the return value is one of the following error codes.</para>
            /// <para>This doc was truncated.</para>
            /// </returns>
            /// <remarks>
            /// <para><see href="https://docs.microsoft.com/windows/win32/api/iphlpapi/nf-iphlpapi-sendarp">Learn more about this API from docs.microsoft.com</see>.</para>
            /// </remarks>
            [DllImport("IPHlpApi", ExactSpelling = true)]
            [DefaultDllImportSearchPaths(DllImportSearchPath.System32)]
            [SecurityCritical]
            internal static extern int SendARP(uint destinationIp, uint sourceIp, byte[] macAddress, ref int physicalAddrLength);
        }
    }
}
